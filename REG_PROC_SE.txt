---------------------------------------------------------------------------
Structured English: Process Registration
---------------------------------------------------------------------------
Allocate memory for process stack 
Set Stacktop = stackpointer + stacksize - stack frame size
Create Process control block (PCB)
Set Initial values for registers r0 to r12 on the stack 
Set Link register on the stack to entry point of pterm routine 
Set PC on the stack to the Process's entry point
Set xPSR on the stack to enable thumb mode
Set ID element in PCB to supplied ID
Set SP element in PCB to Stacktop
Set mailbox ID element in PCB to -1
Set stack address element in PCB to address of entire stack memory
Set Priority element in PCB to supplied priority
Insert PCB into Process Queue with appropriate priority 


---------------------------------------------------------------------------
Structured English: Run first process
---------------------------------------------------------------------------

Set PSP to highest priority process's stacktop
Initialize SYSTICK module
Set link register to 0xFFFFFFFD to signal thread mode and PSP stack pointer
Force return to PSP by executing assembly code " Bx LR"


---------------------------------------------------------------------------
Structured English: Systick Module 
---------------------------------------------------------------------------

Increment Time of day counter
Trigger PendSV handler

---------------------------------------------------------------------------
Structured English: PendSV handler
---------------------------------------------------------------------------

disable all interrupts
Push registers R4 to R11 on the process stack
Set Stack pointer element in Running PCB to current stack pointer
Get next process to run
Set stack pointer to next process's stack pointer
Pull registers R4 to R11 from next process's stack 
enable all interrupts

---------------------------------------------------------------------------
Structured English: pterm
---------------------------------------------------------------------------

CALL pkcall subroutine with TERMINATE code message 

---------------------------------------------------------------------------
Structured English: kterm
---------------------------------------------------------------------------

store the running process's PCB
remove the running process from the WTR queue
set the running process to the next one in the list
free the stored process's stack
free the stored process's PCB
set the PSP to the current running process's SP
restore the registers of the current running process

---------------------------------------------------------------------------
Structured English: pgetid
---------------------------------------------------------------------------

CALL pkcall subroutine with GETID code message
provide the id number to the calling process 
EXIT 

---------------------------------------------------------------------------
Structured English: kgetid
---------------------------------------------------------------------------

provide the id number of the running process to the calling routine
EXIT

---------------------------------------------------------------------------
Structured English: pnice
---------------------------------------------------------------------------
IF desired priority is higher than 1 OR lower than 3
	THEN CALL pkcall routine with NICE code message and desired priority
	EXIT
ELSE
	EXIT with ERROR code
ENDIF



---------------------------------------------------------------------------
Structured English: knice
---------------------------------------------------------------------------
Set SP of the running process to the PSP
change priority of running process to desired prioirty
IF desired priority = current priority
	THEN EXIT
ELSE
	remove running PCB from current WTR queue 
	insert running PCB into new priority queue
ENDIF
IF desired priority > current priority
	THEN set current priority = desired priority
ENDIF
Set the PSP to the SP of the  current running process	
EXIT

---------------------------------------------------------------------------
Structured English: pbind
---------------------------------------------------------------------------

IF mailbox number is within boundary 
	THEN CALL pkcall routine with BIND code message and mailbox number 
	EXIT with mailbox number
ELSE 
	EXIT with error message
ENDIF

---------------------------------------------------------------------------
Structured English: kbind
---------------------------------------------------------------------------

IF Process is already bound to mailbox OR mailbox is bound to another process
	THEN EXIT with error code
ELSE
	store desired mailbox ID in PCB
	connect PCB to desired mailbox
	EXIT with mailbox number
ENDIF

---------------------------------------------------------------------------
Structured English: psend
---------------------------------------------------------------------------

IF size of message to be sent > max message size
	THEN EXIT with error code
ENDIF
create message request with destination mailbox id, message, and its size
CALL pkcall routine with SEND code and message request 
EXIT

---------------------------------------------------------------------------
Structured English: ksend
---------------------------------------------------------------------------

IF sender does not own a mailbox OR destination mailbox not found
	THEN EXIT with error code
ENDIF
IF receiving process is blocked
	THEN give message, its size, and source id directly to receiver
	Unblock receiver by inserting its PCB into WTR queue
ELSE
	put message, its size, and source id into the receive mailbox
ENDIF
EXIT with success code

---------------------------------------------------------------------------
Structured English: precv
---------------------------------------------------------------------------

create mcb with buffer and buffer size
CALL pkcall routine with RECV code messsage and an mcb to store msg
EXIT with number of bytes sent and sender id.

---------------------------------------------------------------------------
Structured English: krecv
---------------------------------------------------------------------------

IF the current process is not bound to a mailbox 
	
	THEN EXIT with error code
ELSE
	IF a message is found in the mailbox
		
		THEN EXIT with message back to precv routine
	
	ELSE
		
		store address of process mcb in mailbox
	
		Store current psp to pcb's sp
		
		block running process by removing it from WTR queue
		
		change current psp to next pcb's sp
		

---------------------------------------------------------------------------
Structured English: p_uart
---------------------------------------------------------------------------
Set

EXIT

---------------------------------------------------------------------------
Structured English: k_uart
---------------------------------------------------------------------------
Set

EXIT

---------------------------------------------------------------------------
Structured English: time server
---------------------------------------------------------------------------

Receive a message from the mailbox
IF the message is from SYSTICK
	THEN increment the global counter
	IF counter of first entry in the UART list = global counter
		THEN send a wake up message to the process
		remove the entry from the sleeping list		
	ENDIF
ELSE
	IF the message is a time request
		THEN send the global counter to the mailbox of the requesting process
	ELSE
		extract the mailbox id and the sleeping duration from the received message
		create a sleeping process entry
		set counter element in sleeping process entry = requested time + global counter
		set the mailbox id element = mailbox id of the sleeping process
		enqueue the entry in the sleep list and place it according to counter value
	ENDIF
ENDIF   
REPEAT

---------------------------------------------------------------------------
Structured English: window manager
---------------------------------------------------------------------------
Set

EXIT

---------------------------------------------------------------------------
Structured English: idle process
---------------------------------------------------------------------------
Set

EXIT