---------------------------------------------------------------------------
Structured English: Send Speed and direction algorithm
---------------------------------------------------------------------------
Create message structure
Code element in mesage structure = 0xC0
first argument element in message structure = desired train number
least three bits of second argument element in message structure = speed
four following bits of second argument element in message structure = 0
last bit of second argument element in message structure = direction 
CALL psend function with message, size, and the DLL process mailbox address

---------------------------------------------------------------------------
Structured English: Send switch algorithm
---------------------------------------------------------------------------

IF the state is no change
	EXIT 
ENDIF
Create message structure
Code element in mesage structure = 0xE0
first argument element in message structure = desired switch number
second argument element in message structure = direction of switch
CALL psend function with message, size, and the DLL process mailbox address


---------------------------------------------------------------------------
Structured English: Reset hall queue algorithm
---------------------------------------------------------------------------

Create message structure
Code element in mesage structure = 0xA8
first argument element in message structure = 0
second argument element in message structure = 0
CALL psend function with message, size, and the DLL process mailbox address

---------------------------------------------------------------------------
Structured English: hall sensor acknowledgment
---------------------------------------------------------------------------

Create message structure
Code element in mesage structure = 0xC0
first argument element in message structure = hall sensor number
second argument element in message structure = 0
CALL psend function with message, size, and the DLL process mailbox address

---------------------------------------------------------------------------
Structured English: Data link layer (DDL) process algorithm
---------------------------------------------------------------------------
Bind process to mailbox 
WHILE TRUE
	RECV msg from mailbox
	IF received from UART	
		SELECT PacketType
			CASE DATA
				IF recv nr == machine ns AND recv ns == machine nr
					NR incremented modulo 8
					send message elements to train manager
					send ack back to UART
					set sent flag to 1
				ELSE
					Send NACK to UART
				ENDIF
	
			CASE ACK
				IF recv nr == machine ns
					set sent flag to 1
				ELSE
					Send NACK to UART
			CASE NACK
				send stored packet to UART
		ENDSELECT
	ELSE IF received from train manager
		packet populated
		packet given to UART
		send message to time server to wake up after 1 second
		set sent flag to 0
		NS incremented modulo 8
	ELSE IF received from time server
		IF flag is 0
			Resend packet
		ENDIF
	ENDIF
ENDWHILE


---------------------------------------------------------------------------
Structured English: Train Manager Process Algorithm
---------------------------------------------------------------------------
Bind process to mailbox 
Send message to DLL with all switches straight 
Send message to DLL with hall sensor queue reset
Ask display to enter train sections and speed
RECV message from display
Load trains locations and speeds
Get next direction
Get next switch state
WHILE destination not reached
	IF switch state needs to change
		SEND change SWITCH message to DLL
	ENDIF
	SEND next direction and speed to specified train
	wait to receive message back from DLL with new train location
	Get next direction
	Get next switch state
ENDWHILE
Send stop train message to DLL

---------------------------------------------------------------------------
Structured English: Window Manager
---------------------------------------------------------------------------

Initialize all window sizes and cursor positions of each window
initialize the first window to be the active window
DO WHILE there are messages in the mailbox
	IF the received message is a window bind request
		THEN IF the requested window is not already bound
			THEN set the requesting process to be the owner
		ENDIF
	ELSE IF the received message is window unbind request
		THEN IF the requesting process owns the window to be unbound
			THEN unbind the window by removing its owner
			clear the window
		ENDIF
	ELSE IF the received message is a display request
		THEN IF the requesting process owns a window
			THEN print the message on that window
		ENDIF
	ELSE IF the received message is from UART (input character)
		THEN 
		

---------------------------------------------------------------------------
Structured English: Physical layer reception
---------------------------------------------------------------------------

IF

