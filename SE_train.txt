---------------------------------------------------------------------------
Structured English: Send Speed and direction algorithm
---------------------------------------------------------------------------
Create message structure
Code element in mesage structure = 0xC0
first argument element in message structure = desired train number
least three bits of second argument element in message structure = speed
four following bits of second argument element in message structure = 0
last bit of second argument element in message structure = direction 
CALL psend function with message, size, and the DLL process mailbox address

---------------------------------------------------------------------------
Structured English: Send switch algorithm
---------------------------------------------------------------------------

Create message structure
Code element in mesage structure = 0xE0
first argument element in message structure = desired switch number
second argument element in message structure = direction of switch
CALL psend function with message, size, and the DLL process mailbox address


---------------------------------------------------------------------------
Structured English: Reset hall queue algorithm
---------------------------------------------------------------------------

Create message structure
Code element in mesage structure = 0xA8
first argument element in message structure = 0
second argument element in message structure = 0
CALL psend function with message, size, and the DLL process mailbox address

---------------------------------------------------------------------------
Structured English: hall sensor acknowledgment
---------------------------------------------------------------------------

Create message structure
Code element in mesage structure = 0xC0
first argument element in message structure = hall sensor number
second argument element in message structure = 0
CALL psend function with message, size, and the DLL process mailbox address

---------------------------------------------------------------------------
Structured English: Data link layer (DDL) process algorithm
---------------------------------------------------------------------------
Bind process to mailbox 
WHILE TRUE
	CALL RECV function
	IF received from UART
		NR incremented modulo 8
				
		SELECT PacketType
			CASE DATA
				CALL psend function to train process
			CASE ACK
			CASE NACK
		ENDSELECT
	ELSE IF received from train manager
		SELECT PacketType
			CASE DATA
				NS incremented modulo 8
				packet populated
				packet given to UART
			CASE ACK
			CASE NACK
		ENDSELECT		
	ENDIF
ENDWHILE


---------------------------------------------------------------------------
Structured English: Train Manager Process Algorithm
---------------------------------------------------------------------------
Bind process to mailbox 
Send message to DLL with all switches straight 
Send message to DLL with hall sensor queue reset
Ask display to enter train sections and speed
RECV message from display
Load trains locations and speeds
Get next direction
Get next switch state
WHILE destination not reached
	IF switch state needs to change
		SEND change SWITCH message to DLL
	ENDIF
	SEND next direction and speed to specified train
	wait to receive message back from DLL with new train location
	Get next direction
	Get next switch state
ENDWHILE
Send stop train message to DLL

---------------------------------------------------------------------------
Structured English: Window Manager
---------------------------------------------------------------------------

Initialize all window sizes and cursor positions of each window
DO WHILE there are messages in the mailbox
	IF the received message is a window bind request
		THEN IF the requested window is not already bound
			THEN set the requesting process to be the owner
			make this window the active window
		ENDIF
	ELSE IF the received message is window unbind request
		THEN IF the requesting process owns the window to be unbound
			THEN unbind the window by removing its owner
			clear the window
			IF there is another bound window
				THEN make it the new active window
			ELSE
				set that there are no active windows
			ENDIF
		ENDIF
	ELSE IF the received message is a display request
		THEN IF the requesting process owns a window
			THEN print the message on that window
		ENDIF
	ELSE IF the received message is from UART (input character)
		THEN IF there is an active window 
			THEN IF the incoming character a tab
				THEN make the next bound window the active window
			ELSE
				echo back the charater to the active window
				send the character to the owner of the active window
			ENDIF
		ENDIF
	ENDIF
ENDDO

---------------------------------------------------------------------------
Structured English: printing algorithm
---------------------------------------------------------------------------

IF the character to be printed is an escape
	THEN ignore the character
ELSE IF it is a delete character
	THEN IF the cursor position is not at the start of the line
		THEN decrement the column position of the cursor
		send the character to be sent to the UART module
	ENDIF
ELSE IF it an end of line character
	THEN store spaces in the buffer until the maximum column size
	null terminate the window buffer of that line
	IF the cursor row position is at the end of the window
		THEN put the cursor at the initial row and column positions
		start printing from (vertual position + 2) mod vertical size as the row index to the window buffer
		DO UNTIL (vertical size -1) lines are printed
			print the current line from the buffer
			go to the next line mod vertical size
		ENDDO
		clear the last line in the window
		set the cursor position to the start of the last line in the window
		vertual position = (vertual position + 1) mod vertical size
	ELSE
		increment the row position of the cursor and the vertual position
		set the column position of the cursor to the initial value
		print an end of line character
	ENDIF 
ELSE
	IF the cursor position has reached the last column
		THEN execute the printing algorithm to print end of line character
	ENDIF
	store the character in the window buffer (index = column position - initial column position)
	increment the column position of the cursor
	send the character to be sent to the UART module
ENDIF
	
---------------------------------------------------------------------------
Structured English: pnice
---------------------------------------------------------------------------
IF desired priority is higher than 1 OR lower than 3
	THEN CALL pkcall routine with NICE code message and desired priority
	EXIT
ELSE
	EXIT with ERROR code
ENDIF



---------------------------------------------------------------------------
Structured English: knice
---------------------------------------------------------------------------
Set SP of the running process to the PSP
change priority of running process to desired prioirty
IF desired priority = current priority
	THEN EXIT
ELSE
	remove running PCB from current WTR queue 
	insert running PCB into new priority queue
ENDIF
IF desired priority > current priority
	THEN set current priority = desired priority
ENDIF
Set the PSP to the SP of the  current running process	
EXIT

---------------------------------------------------------------------------
Structured English: pbind
---------------------------------------------------------------------------

IF mailbox number is within boundary 
	THEN CALL pkcall routine with BIND code message and mailbox number 
	EXIT with mailbox number
ELSE 
	EXIT with error message
ENDIF

---------------------------------------------------------------------------
Structured English: kbind
---------------------------------------------------------------------------

IF Process is already bound to mailbox OR mailbox is bound to another process
	THEN EXIT with error code
ELSE
	store desired mailbox ID in PCB
	connect PCB to desired mailbox
	EXIT with mailbox number
ENDIF

---------------------------------------------------------------------------
Structured English: psend
---------------------------------------------------------------------------

IF size of message to be sent > max message size
	THEN EXIT with error code
ENDIF
create message request with destination mailbox id, message, and its size
CALL pkcall routine with SEND code and message request 
EXIT

---------------------------------------------------------------------------
Structured English: ksend
---------------------------------------------------------------------------

IF sender does not own a mailbox OR destination mailbox not found
	THEN EXIT with error code
ENDIF
IF receiving process is blocked
	THEN give message, its size, and source id directly to receiver
	Unblock receiver by inserting its PCB into WTR queue
ELSE
	put message, its size, and source id into the receive mailbox
ENDIF
EXIT with success code

---------------------------------------------------------------------------
Structured English: precv
---------------------------------------------------------------------------

create mcb with buffer and buffer size
CALL pkcall routine with RECV code messsage and an mcb to store msg
EXIT with number of bytes sent and sender id.

---------------------------------------------------------------------------
Structured English: krecv
---------------------------------------------------------------------------

IF the current process is not bound to a mailbox 
	
	THEN EXIT with error code
ELSE
	IF a message is found in the mailbox
		
		THEN EXIT with message back to precv routine
	
	ELSE
		
		store address of process mcb in mailbox
	
		Store current psp to pcb's sp
		
		block running process by removing it from WTR queue
		
		change current psp to next pcb's sp
		

---------------------------------------------------------------------------
Structured English: p_uart
---------------------------------------------------------------------------
Set

EXIT

---------------------------------------------------------------------------
Structured English: k_uart
---------------------------------------------------------------------------
Set

EXIT

---------------------------------------------------------------------------
Structured English: time server
---------------------------------------------------------------------------

Receive a message from the mailbox
IF the message is from SYSTICK
	THEN increment the global counter
	IF counter of first entry in the UART list = global counter
		THEN send a wake up message to the process
		remove the entry from the sleeping list		
	ENDIF
ELSE
	IF the message is a time request
		THEN send the global counter to the mailbox of the requesting process
	ELSE
		extract the mailbox id and the sleeping duration from the received message
		create a sleeping process entry
		set counter element in sleeping process entry = requested time + global counter
		set the mailbox id element = mailbox id of the sleeping process
		enqueue the entry in the sleep list and place it according to counter value
	ENDIF
ENDIF   
REPEAT

---------------------------------------------------------------------------
Structured English: window manager
---------------------------------------------------------------------------
Set

EXIT

---------------------------------------------------------------------------
Structured English: idle process
---------------------------------------------------------------------------
Set

EXIT
